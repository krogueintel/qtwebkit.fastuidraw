Tests for WI.IndexSet.


== Running test suite: IndexSet
-- Running test case: IndexSet.constructor
PASS: size should be zero.
PASS: firstIndex should be NaN.
PASS: lastIndex should be NaN.
PASS: Should be [].

-- Running test case: IndexSet.constructor array
Initialize IndexSet with an array.
PASS: size should be 5.
PASS: firstIndex should be 0.
PASS: lastIndex should be 100.
PASS: Should be [0,1,5,50,100].
Initialize IndexSet with an array containing duplicate indexes.
PASS: size should be 5.
PASS: Should be [0,1,5,50,100].

-- Running test case: IndexSet.constructor invalid
PASS: size should be zero.

-- Running test case: IndexSet.prototype.clear
PASS: size should be zero.
PASS: firstIndex should be NaN.
PASS: lastIndex should be NaN.
PASS: Should be [].

-- Running test case: IndexSet.prototype.add
PASS: size should be 1.
PASS: has should return true.

-- Running test case: IndexSet.prototype.add duplicate
PASS: size should be 1.

-- Running test case: IndexSet.prototype.add invalid
PASS: size should be zero.

-- Running test case: IndexSet.prototype.delete
Given an IndexSet with values [1,2,3]:
PASS: delete 3 should succeed.
PASS: has 3 should return false.

-- Running test case: IndexSet.prototype.delete nonexistent
Given an IndexSet with values [1,2,3]:
PASS: delete 4 should fail.

-- Running test case: IndexSet.prototype.delete invalid
-- Running test case: IndexSet.prototype[Symbol.iterator]
Given an IndexSet with values [20,1,10,2]:
1
2
10
20

-- Running test case: IndexSet.prototype.indexGreaterThan
Given an IndexSet with values [1,2]:
PASS: Index greater than 0 should be 1.
PASS: Index greater than 1 should be 2.
PASS: Index greater than 2 should be NaN.
PASS: Index greater than 3 should be NaN.

-- Running test case: IndexSet.prototype.indexLessThan
Given an IndexSet with values [1,2]:
PASS: Index less than 0 should be NaN.
PASS: Index less than 1 should be NaN.
PASS: Index less than 2 should be 1.
PASS: Index less than 3 should be 2.

-- Running test case: IndexSet.prototype.copy
PASS: Copy and original should be different objects.
PASS: Copy and original should have the same values.

-- Running test case: IndexSet.prototype.addRange
Given an IndexSet with values []:
Add range to an empty IndexSet.
PASS: Should be [1,2,3] after adding [1,2,3].

Given an IndexSet with values [10,11,12]:
Add range before the beginning.
PASS: Should be [0,1,2,10,11,12] after adding [0,1,2].

Given an IndexSet with values [1,2,3]:
Add range after the end.
PASS: Should be [1,2,3,10,11,12] after adding [10,11,12].

Given an IndexSet with values [1,5]:
Add range in the middle.
PASS: Should be [1,2,3,4,5] after adding [2,3,4].

Given an IndexSet with values [1,3,5]:
Add range overlapping the middle.
PASS: Should be [1,2,3,4,5] after adding [2,3,4].

Given an IndexSet with values [3,4,5]:
Add range overlapping the beginning.
PASS: Should be [1,2,3,4,5] after adding [1,2,3].

Given an IndexSet with values [1,2,3]:
Add range overlapping the end.
PASS: Should be [1,2,3,4,5] after adding [3,4,5].


-- Running test case: IndexSet.prototype.deleteRange
Given an IndexSet with values []:
Remove range from an empty IndexSet.
PASS: Should be [] after removing [1,2,3].

Given an IndexSet with values [10,11,12]:
Remove range before the beginning.
PASS: Should be [10,11,12] after removing [0,1,2].

Given an IndexSet with values [0,1,2]:
Remove range after the end.
PASS: Should be [0,1,2] after removing [10,11,12].

Given an IndexSet with values [0,1,2,3]:
Remove range in the middle.
PASS: Should be [0,3] after removing [1,2].

Given an IndexSet with values [1,3,5]:
Remove range overlapping the middle.
PASS: Should be [1,5] after removing [2,3,4].

Given an IndexSet with values [1,2,3]:
Remove range overlapping the beginning.
PASS: Should be [3] after removing [0,1,2].

Given an IndexSet with values [1,2,3]:
Remove range overlapping the end.
PASS: Should be [1] after removing [2,3,4].


-- Running test case: IndexSet.prototype.equals
PASS: Should trivially equal itself.
PASS: Copy and original should be equal.
PASS: Modified copy and original should not be equal.

-- Running test case: IndexSet.prototype.difference
Given an IndexSet with values [], and another IndexSet with values []:
PASS: Difference between the first and second IndexSet should be [].

Given an IndexSet with values [1,2,3], and another IndexSet with values []:
PASS: Difference between the first and second IndexSet should be [1,2,3].

Given an IndexSet with values [], and another IndexSet with values [1,2,3]:
PASS: Difference between the first and second IndexSet should be [].

Given an IndexSet with values [1,2,3], and another IndexSet with values [2,3,4]:
PASS: Difference between the first and second IndexSet should be [1].


